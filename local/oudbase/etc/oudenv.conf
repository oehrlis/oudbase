#!/bin/bash
# ------------------------------------------------------------------------------
# OraDBA - Oracle Database Infrastructur and Security, 5630 Muri, Switzerland
# ------------------------------------------------------------------------------
# Name.......: oudenv.conf
# Author.....: Stefan Oehrli (oes) stefan.oehrli@oradba.ch
# Editor.....: Stefan Oehrli
# Date.......: 2023.03.28
# Version....: v3.1.0
# Purpose....: Configuration File to define alias and environment 
#              variables for the OUD Instances
# Notes......: This script is mainly used for environment without TVD-Basenv
# Reference..: https://github.com/oehrlis/oudbase
# License....: Apache License Version 2.0, January 2004 as shown
#              at http://www.apache.org/licenses/
# ------------------------------------------------------------------------------
# Modified...:
# see git revision history with git log for more information on changes
# ------------------------------------------------------------------------------

# - Set Environment Variables --------------------------------------------------
# Syntax....: VAR=Value
# ------------------------------------------------------------------------------
export OUDENV_PS1='\u@\h:\w/ [${OUD_INSTANCE}] '
export BASENV_PS1='\u@\h:\w/ [${ORACLE_SID}${BE_PDB:+.$BE_PDB}](${OUD_INSTANCE}) '
export PS1=${OUDENV_PS1}
export cdh=${ORACLE_HOME}
export cda=${OUD_INSTANCE_ADMIN}
export cdb=${OUD_BASE}
export cdl=${OUD_LOCAL}
export cdib=${OUD_INSTANCE_BASE}
export cdic=${OUD_INSTANCE_HOME}/OUD/config
export cdih=${OUD_INSTANCE_HOME}
export ORACLE_INSTANCE=${OUD_INSTANCE_HOME}
export cdil=${OUD_INSTANCE_HOME}/OUD/logs
export cdob=${ORACLE_BASE}
export cdab=${ORACLE_BASE}/admin
export etc=${ETC_BASE}
export log=${LOG_BASE}
export OUD_BIN=${OUD_INSTANCE_HOME}/OUD/bin
export OUD_CONF=${OUD_INSTANCE_HOME}/OUD/config
export OUD_LOG=${OUD_INSTANCE_HOME}/OUD/logs
export OUD_BACKUP_DIR=${OUD_BACKUP_BASE}/backups/${OUD_INSTANCE}
export OUD_EXPORT_DIR=${OUD_BACKUP_BASE}/exports/${OUD_INSTANCE}

# Customer spezific Variables
export CUSTOM_ORA_LOG=${LOG_BASE}

# - Set TVD LDAP Variables -----------------------------------------------------
# export TVDLDAP_LDAPHOST="localhost"         # Default LDAP host. If omitted, it is derived from ldap.ora
# export TVDLDAP_LDAPPORT=389                 # Default LDAP port. If omitted, it is derived from ldap.ora
# export TVDLDAP_BASEDN=""                    # Default base DN used for the LDAP tools

export TVDLDAP_BINDDN=""                    # Default Bind DN to used for the LDAP tools
export TVDLDAP_BINDDN_PWDASK="FALSE"        # Flag to enable interactiv Password e.g. -W
export TVDLDAP_BINDDN_PWD=""                # Bind Password, possible but not a good idea to store it here
export TVDLDAP_BINDDN_PWDFILE=""            # Path to password file

# export TVDLDAP_SQL_USER="system"            # Default SQL Plus user used test connect strings
# export TVDLDAP_SQL_PWD=""                   # SQL Plus password, to test connect strings. It is possible but not a good idea to store it here
# export TVDLDAP_SQL_PWDASK="FALSE"           # Flag to enable interactiv Password e.g. -W
# export TVDLDAP_SQL_PWDFILE=""               # Path to password file for SQL Plus tests

export TVDLDAP_KEEP_LOG_DAYS=14             # amount of days to keep the logfiles
# export TVDLDAP_LDAPTOOLS=""                 # define default LDAP utilities. Will be overwritten by check_ldap_tools
# export TVDLDAP_VERBOSE="FALSE"              # enable verbose mode
# export TVDLDAP_DEBUG="FALSE"                # enable debug mode
# export TVDLDAP_QUIET="FALSE"                # enable quiet mode
# export TVDLDAP_FORCE="FALSE"                # enable force mode to overwrite existing entries
# export TVDLDAP_DRYRUN="FALSE"               # enable dry run mode to show what would be done but do not actually do it
export TVDLDAP_TIMEMOUT=1                   # define default timeout for testing

# - Set Aliases ----------------------------------------------------------------
# Syntax....: alias xyz='alias-definiton'
# ------------------------------------------------------------------------------
# - DEF_ALIASES default aliases for oud_help -----------------------------------
alias ob_backup='cd ${OUD_BASE}; { sha1sum -c doc/.oudbase.sha 2>/dev/null |grep -v ": OK"|grep -v ": FAILED"|sed "s/$/: CHANGED/"; find . -type f \( ! -iname ".oudbase.sha" ! -iname "*.log" \) -print0|xargs -0 sha1sum |grep -Fxvf doc/.oudbase.sha |cut -d" " -f3; }|sort -u -t: -k1,1|sed "s|^\.|$OUD_BASE|"| tar -cvf ${OUD_BACKUP_BASE}/oudbase_changed.tar -T - 2>/dev/null; if [ $ETC_BASE != $ETC_CORE ]; then tar -uvf ${OUD_BACKUP_BASE}/oudbase_changed.tar $ETC_BASE 2>/dev/null; fi ; echo "Backup changed/added OUD Base files (\$OUD_BASE) to \${OUD_BACKUP_BASE}/oudbase_changed.tar" ;cd - >/dev/null' # Backup changed files from $OUD_BASE and all files from $ETC_BASE
alias cda='cd ${OUD_INSTANCE_ADMIN}'            # Change workding directory to ${OUD_INSTANCE_ADMIN}
alias cdh='cd ${ORACLE_HOME}'                   # Change workding directory to ${ORACLE_HOME}
alias cdih='cd ${OUD_INSTANCE_HOME}'            # Change workding directory to ${OUD_INSTANCE_HOME}
alias cdil='cd ${OUD_INSTANCE_HOME}/OUD/logs'   # Change workding directory to ${OUD_INSTANCE_HOME}/OUD/logs
alias cdob='cd ${ORACLE_BASE}'                  # Change workding directory to ${ORACLE_BASE}
alias dsc='dsconfig --hostname localhost --port $PORT_ADMIN --trustAll --bindDN "cn=Directory Manager" --bindPasswordFile $PWD_FILE' # Call dsconfig with hostname, port, bind DN and password
alias dsrs='dsreplication status --bindDN "cn=Directory Manager" --adminPasswordFile $PWD_FILE --hostname ${HOSTNAME} --port $PORT_ADMIN --trustAll'    # Display replication status of current instance
alias gen_pwd='gen_password'                    # Generate a password string (gen_password)"
alias goh='get_oracle_home'                     # Get oracle home of current oud instance
alias gp='get_ports'                            # Get ports of current oud instance
alias h='oud_help'                              # Display OUD environment help
alias oudenv='. ${OUD_BASE}/bin/oudenv.sh'      #Â Source the OUD Base again
alias os='oud_status'                           # Display OUD status of current instance, alternative us os, oudstat or oud_status"
alias taa='tail -f -n 50 ${OUD_INSTANCE_HOME}/OUD/logs/access' # tail on current OUD access log (${OUD_INSTANCE_HOME}/OUD/logs/access)
alias ou='oud_up'                               # List OUD instances and there status, alternative us ou, oudup or oud_up"
alias version='cd ${OUD_BASE};cat doc/.version; { sha1sum -c doc/.oudbase.sha 2>/dev/null |grep -v ": OK"|sed "s/: FAILED$/: CHANGED/"|sed "s/: FAILED.*/: MISSING/"; find . -type f \( ! -iname ".oudbase.sha" ! -iname "*.log" \) -print0|xargs -0 sha1sum |grep -Fxvf doc/.oudbase.sha |cut -d" " -f3|sed "s/$/: ADDED/"; }|sort -u -t: -k1,1|sed "s/^\./\$OUD_BASE/"|grep -iv "OUD_BASE/log";cd - >/dev/null' # Display OUD Base version and changed/added files
alias vioud='vi "${ETC_BASE}/oudtab"'           # Open vi on ${ETC_BASE}/oudtab
# - EOF DEF_ALIASES ------------------------------------------------------------
# create an alias for each oud instance
for i in ${OUD_INST_LIST}
  do
    alias $i=". ${OUD_BASE}/bin/oudenv.sh $i"
done

# other default aliases
alias backup_changed='cd ${OUD_BASE}; { sha1sum -c doc/.oudbase.sha 2>/dev/null |grep -v ": OK"|grep -v ": FAILED"|sed "s/$/: CHANGED/"; find . -type f \( ! -iname ".oudbase.sha" ! -iname "*.log" \) -print0|xargs -0 sha1sum |grep -Fxvf doc/.oudbase.sha |cut -d" " -f3; }|sort -u -t: -k1,1|sed "s|^\.|$OUD_BASE|"| tar -cvf ${OUD_BACKUP_BASE}/oudbase_changed.tar -T - 2>/dev/null; if [ $ETC_BASE != $ETC_CORE ]; then tar -uvf ${OUD_BACKUP_BASE}/oudbase_changed.tar $ETC_BASE 2>/dev/null; fi ; echo "Backup changed/added OUD Base files (\$OUD_BASE) to \${OUD_BACKUP_BASE}/oudbase_changed.tar" ;cd - >/dev/null' # Backup changed files from $OUD_BASE and all files from $ETC_BASE
alias cdab='cd ${OUD_INSTANCE_ADMIN_BASE}'                            # Change workding directory to ${OUD_INSTANCE_ADMIN_BASE}
alias cdib='cd ${OUD_INSTANCE_BASE}'                                  # Change workding directory to ${OUD_INSTANCE_BASE}
alias cdic='cd ${OUD_INSTANCE_HOME}/OUD/config'                       # Change workding directory to ${OUD_INSTANCE_HOME}/OUD/config
alias cdl.bin='cd "${OUD_BASE}/bin"'                                  # Change workding directory to ${OUD_BASE}/bin
alias cdl.etc='cd "${OUD_BASE}/etc"'                                  # Change workding directory to ${OUD_BASE}/etc
alias cdl.log='cd "${OUD_BASE}/log"'                                  # Change workding directory to ${OUD_BASE}/log
alias get_patch='$cdh/OPatch/opatch lsinventory|grep -iv "One-off" |grep -iB 2 "Patch description"' # List Patches installed in $ORACLE_HOME using opatch
alias get_pid='oud_pgrep org.opends.server|grep -i $OUD_INSTANCE |sed -r "s/\w+\s([[:digit:]]+).*/\1/"' # get PID of current OUD instance
alias opsg='oud_pgrep'                                                # Call function oud_pgrep to simply grep PID on docker container where ps isn't installed
alias oudup='oud_up'                                                  # List OUD instances and there status, alternative us ou, oudup or oud_up"
alias oudstat='oud_status'                                            # Display OUD status of current instance, alternative us os, oudstat or oud_status"
alias oudup='oud_up'                                                  # List OUD instances and there status short form up"
alias tae='tail -f -n 50 ${OUD_INSTANCE_HOME}/OUD/logs/errors'        # tail -f on the OUD instance error logfile ${OUD_INSTANCE_HOME}/OUD/logs/errors
alias tarep='tail -f -n 50 ${OUD_INSTANCE_HOME}/OUD/logs/replication' # tail -f on the OUD instance replication logfile ${OUD_INSTANCE_HOME}/OUD/logs/replication
alias tas='tail -f -n 50 ${OUD_INSTANCE_HOME}/OUD/logs/server.out'    # tail -f on the OUD instance server.out logfile ${OUD_INSTANCE_HOME}/OUD/logs/server.out
alias task='manage-tasks --hostname localhost --port $PORT_ADMIN --trustAll --bindDN "cn=Directory Manager" --bindPasswordFile $PWD_FILE'               # Display OUD tasks
alias tasksum='manage-tasks --hostname localhost --port $PORT_ADMIN --trustAll --bindDN "cn=Directory Manager" --bindPasswordFile $PWD_FILE --summary'  # List OUD task summary
alias update_pid='get_pid >${OUD_INSTANCE_HOME}/OUD/logs/server.pid'  # Write PID of current instance to server.pid file using get_pid

# aliases overlapping with TVD-Basenv
alias cdb='cd ${OUD_BASE}'                            # similar to TVD-Basenv, but different variable ${OUD_BASE} rather than ${BE_HOME}
alias cdl='cd "${OUD_LOCAL}"'                         # similar to TVD-Basenv, but different variable ${OUD_LOCAL} rather than ${TVD_BASE}
alias etc='cd "${ETC_BASE}"'                          # same definition as in TVD-Basenv, but variable ${ETC_BASE} may be used different
alias l.='ls -d .* --color=auto'                      # same definition as in TVD-Basenv
alias l='LC_COLLATE=C ls -al | more'                  # same definition as in TVD-Basenv
alias ll='LC_COLLATE=C ls -alb'                       # same definition as in TVD-Basenv
alias log='cd "${LOG_BASE}"'                          # same definition as in TVD-Basenv, but variable ${LOG_BASE} may be used different
alias lr='ls -ltr'                                    # same definition as in TVD-Basenv
alias ls='ls --color=auto'                            # same definition as in TVD-Basenv
alias lsl='ls -lrt $* | tail -n 20'                   # same definition as in TVD-Basenv
alias oudbase='cd ${OUD_BASE}'                        # similar to TVD-Basenv
alias psg='ps -ef | egrep -v "ps -ef|grep " | grep'   # same definition as in TVD-Basenv

# - EOF ------------------------------------------------------------------------